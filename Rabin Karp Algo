#include <bits/stdc++.h>
using namespace std;

vector<int> patternSearch(string pat, string txt, int mod_val){
  vector<int> v1;
  int t_size = text.length();
  int p_size = pattern.length();
  int prime_no = 256;  
  int mod_val = INT_MAX; 
  int patternHash = 0;
  int textHash = 0;
  int h=1;
  
  for (int i = 0; i < p_size-1; i++) {
      h = (h * prime_no) % mod_val;
  }
  
  // calculate the hash value of the pattern and the first substring of the text
  for (int i = 0; i < p_size; i++) {
      patternHash = (patternHash * prime_no + pattern[i]) % mod_val;
      textHash = (textHash * prime_no + text[i]) % mod_val;
  }
  
  // compare the hash values and the characters of the pattern and the substring
  for (int i = 0; i <= t_size-p_size; i++) {
      if (patternHash == textHash) {
          if (pattern == text.substr(i, p_size)) {
              v1.push_back(i+1);  // match found
          }
      }
      // calculate the hash value of the next substring of the text
      if (i < t_size-p_size) {
          textHash = (prime_no * (textHash - text[i] * h) + text[i+p_size]) % mod_val;
          if (textHash < 0) {
              textHash += mod_val;
          }
      }
  }
  if(v1.size()==0)
    return {-1};
  return v1;
}

int main(){
  string txt;
  string pat;
  cin>>txt>>pat;

  vector <int> ans = patternSearch(pat, txt);
  for(auto it : ans)
    cout<<it<<" ";
  return 0;
}
